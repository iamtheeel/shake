expTrackDir: "exp_Track"

debugs:
    debug: True 
    writeValData: True
    saveModelInfo: True
    runModel: False
    testNormCorr: False #This loads up the entire matrix

    showFFTPlots: False
    showWindowPlots: False
plts:
    pltDir: "plots"
    animDir: "/Volumes/Data/thesis/animations"
    #animDir: "../animations"
    generatePlots: True
    showFilesForAnimation: False #Show instead of save

    rgbPlotChList: [6, 5, 4] # For 3 channel plot, 0 to use the chList
    #rgbPlotChList: [7, 6, 5] # For 3 channel plot, 0 to use the chList
    #saveCombined: True
    #saveOverlay: False
    #saveInline: False
    
    #yLim: [1, 3]
    #yLim: [0, 0.002]
    yLim: [-0.0015, 0.0015]

data:
    valSplitPercen: .2 #20% of the data for validation
    inputData: "../TestData" # The input data
    dataOutDir: "/Volumes/Data/thesis/data_out"
    #dataOutDir: "..data"

    test: "Test_2" #One person fixed pace, straight path, has labels
    #test: "Test_3" #One person, down hall, into and around lab, has labels, 
    #test: "Test_4" #Multiple people variyed pace, no labels

    classes: ['No Step', '001', '002', '003']
    chList: [8, 7, 6, 5, 4, 3, 2, 16, 1] # 
    #chList: [6, 5, 4] # Try for 3 color plot
    #chList: [10, 9, 8] # Try for 3 color plot
    #chList: [7, 6, 5] # Try for 3 color plot
    #chList: [7, 8, 9, 10] # Test 2, Note: looking at 8Z. seems dead
    #chList: [7, 6, 5, 4, 3, 2, 16, 1] # Test 2, Note: Sensor 8Z seems dead
    #chList: [6, 5, 4, 3, 2, 1, 10, 9, 11, 12, 13] # test 3
    #sensorChList: [1, 2, 3, 4, 5, 6, 7, 10, 11, 14, 15, 16, 17, 18, 19, 20 ] # Just the Z chans
    #sensorChList: [[1], [2], [3], [4], [5], [6], [7], [8, 9, 10], [11, 12, 13], [14], [15], [16], [17], [18], [19], [20] ]

    limitRuns: 2 #2 # Limit the number of runs to load: 0 to load all the data
    limitWindowLen: 0 #20 # Limit the number of windows to load: 0 to load all

    #stompSens: [5, 6]
    #stompSens: [5, 6, 7]
    stompSens: [5, 6, 7]
    stompThresh: 1.5 #If 0, then no stomp detection
    dataThresh: 1.5 # If 0, then no, non-walking detection

    windowLen: 2 #sec
    stepSize: 1 #sec

    # 16 too big on Mac, or at least with firefox running
    #batchSize: 16 #256 #Should be power of 2
    batchSize: 1 #256 #Should be power of 2

    dataScalers: ["std"]
    #dataScalers: ["std", "meanNorm"]
    labelScalers: ["std"]
    #dataScalers: ["meanNorm", "minMaxNorm", "std", "none"]
    #labelScalers: ["meanNorm", "minMaxNorm", "std"]
    #scalers: ["meanNorm", "std", "minMaxNorm"]
    dataScale_values: [1]   #
    labelScale_values: [1] 
    #scale: 100 # Classification

cwt:
    #F0 is the center frequency (higher values = better frequency resolution)
    #B is the bandwidth parameter (higher values = better time resolution)
    # cmor give diagnal lines, no good
    # PUt this in exp track, and save the plots
    ### wavelets for pywt
    # Family	Prefix	Description
    # Haar	haar	Simplest wavelet (equivalent to db1)
    # Daubechies	db	Compactly supported orthogonal wavelets
    # Coiflets	coif	Wavelets with vanishing moments for smooth functions
    # Symlets	sym	Symmetric versions of Daubechies wavelets
    # Biorthogonal	bior	Used in image compression (e.g., JPEG2000)
    # Reverse Biorthogonal	rbio	Similar to bior, with reversed filters
    # Meyer	meyer	Smooth wavelet with an infinite support
    # Morlet	morl	Continuous wavelet used for time-frequency analysis
    # Mexican Hat	mexh	Second derivative of a Gaussian function
    # Gaussian	gaus	Gaussian wavelets
    # ['bior1.1', 'bior1.3', 'bior1.5', 'bior2.2', 'bior2.4', 'bior2.6', 'bior2.8', 'bior3.1', 'bior3.3', 'bior3.5', 'bior3.7', 'bior3.9', 'bior4.4', 'bior5.5', 'bior6.8', 'cgau1', 'cgau2', 'cgau3', 'cgau4', 'cgau5', 'cgau6', 'cgau7', 'cgau8', 'cmor', 'coif1', 'coif2', 'coif3', 'coif4', 'coif5', 'coif6', 'coif7', 'coif8', 'coif9', 'coif10', 'coif11', 'coif12', 'coif13', 'coif14', 'coif15', 'coif16', 'coif17', 'db1', 'db2', 'db3', 'db4', 'db5', 'db6', 'db7', 'db8', 'db9', 'db10', 'db11', 'db12', 'db13', 'db14', 'db15', 'db16', 'db17', 'db18', 'db19', 'db20', 'db21', 'db22', 'db23', 'db24', 'db25', 'db26', 'db27', 'db28', 'db29', 'db30', 'db31', 'db32', 'db33', 'db34', 'db35', 'db36', 'db37', 'db38', 'dmey', 'fbsp', 'gaus1', 'gaus2', 'gaus3', 'gaus4', 'gaus5', 'gaus6', 'gaus7', 'gaus8', 'haar', 'mexh', 'morl', 'rbio1.1', 'rbio1.3', 'rbio1.5', 'rbio2.2', 'rbio2.4', 'rbio2.6', 'rbio2.8', 'rbio3.1', 'rbio3.3', 'rbio3.5', 'rbio3.7', 'rbio3.9', 'rbio4.4', 'rbio5.5', 'rbio6.8', 'shan', 'sym2', 'sym3', 'sym4', 'sym5', 'sym6', 'sym7', 'sym8', 'sym9', 'sym10', 'sym11', 'sym12', 'sym13', 'sym14', 'sym15', 'sym16', 'sym17', 'sym18', 'sym19', 'sym20']

    doCWT: True
    saveCWT: True

    logScaleFreq: False
    numScales: 64 #240
    fMin: 0.5 # 0 = 0... so don't use 0 makes for div by 0
    fMax: 5 #0 = use the nyquist
    wavelet: ["fstep"] #"None" for no CWT
    #wavelet: ["morl", "cmorl"] # f0 = 0.8125, bw = 6.0
    #wavelet: ["cmor", "fstep" ]
    waveLet_center_freq:  [2.14] #fstep center freq best4 for fStep
    #waveLet_center_freq:  [0.8125] #morl center freq
    #waveLet_center_freq:  [10] # best for cmorl
    #Bandwidth nopt used for fstep
    waveLet_bandwidth: [0.8]  # best vor cmorl
    #waveLet_bandwidth: [6.0] 
    # Norms to each ch/data if normTo_max is 0
    #normTo_max: 0.016 #Max for linear scale, but only a few outliers are this high
    #normTo_max: 0.008 #0 for none
    #normTo_min: 0
    normTo_max: 0 #10 #11.15 #Max for log scale
    normTo_min: 0 #1.81
    #normTo_max: 8.708692765932984 #Max for log scale
    #normTo_max: 8.92159461776423 #Max for log scale
    logScale: False

trainer:
    #criterion_regresh: "Huber" # for regresion
    #criterion_regresh: "MAE" # for regresion
    loss_regresh: ["MSE"] # for regresion
    #loss_regresh: ["MSE", "MAE", "Huber"] # for regresion
    loss_class: ["CrossEntropyLoss"] #For classification

    optimizer: ["Adam"]
    #optimizer: ["Adam", "SGD"]
    learning_rate: [0.00001] # note: test with smaller values
    weight_decay:  [0.00001]
    epochs: [7]
    seed: 4601

model: 
    regression: False #Or Clasification
    #name: "multilayerPerceptron"
    #name: "leNetV5"
    name: "MobileNet_v2"

    multilayerPerceptron:
        hidden_neurons: 100

    leNetV5:
        hidden_neurons: 100