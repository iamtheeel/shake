outputDir: "output"

debugs:
    debug: True 
    writeValData: True
    saveModelInfo: True
    runModel: False

    showFFTPlots: False
    showWindowPlots: False
plts:
    pltDir: "../plots"
    animDir: "/Volumes/Data/thesis/animations"
    saveFilesForAnimation: True
    #saveCombined: True
    #saveOverlay: False
    #saveInline: False
    
    #yLim: [1, 3]
    #yLim: [0, 0.002]
    yLim: [-0.0015, 0.0015]

data:
    valSplitPercen: .2 #20% of the data for validation
    dataPath: "../TestData"
    dataSetDir: "savedDataSet_test2"

    test: "Test_2" #One person fixed pace, straight path, has labels
    #test: "Test_3" #One person, down hall, into and around lab, has labels, 
    #test: "Test_4" #Multiple people variyed pace, no labels

    #classes: [0, 1, 2, 3]
    classes: ['No Step', '001', '002', '003']
    #chList: [8, 7, 6, 5, 4, 3, 2, 16, 1] # 
    chList: [6, 5, 4] # Try for 3 color plot
    #chList: [10, 9, 8] # Try for 3 color plot
    #chList: [7, 6, 5] # Try for 3 color plot
    #chList: [7, 8, 9, 10] # Test 2, Note: looking at 8Z. seems dead
    #chList: [7, 6, 5, 4, 3, 2, 16, 1] # Test 2, Note: Sensor 8Z seems dead
    #chList: [6, 5, 4, 3, 2, 1, 10, 9, 11, 12, 13] # test 3
    #sensorChList: [1, 2, 3, 4, 5, 6, 7, 10, 11, 14, 15, 16, 17, 18, 19, 20 ] # Just the Z chans
    #sensorChList: [[1], [2], [3], [4], [5], [6], [7], [8, 9, 10], [11, 12, 13], [14], [15], [16], [17], [18], [19], [20] ]

    limitRuns: 2 # Limit the number of runs to load
    limitWindowLen: 20 # Limit the number of windows to load


    stompSens: [7, 6]
    #stompSens: [5, 6, 7]
    stompThresh: 0 #1.5 #If 0, then no stomp detection
    dataThresh: 0 #1.5 # If 0, then no, non-walking detection


    windowLen: 2 #sec
    stepSize: 1 #sec

    batchSize: 1 #256 #Should be power of 2

    dataScalers: ["meanNorm"]
    #dataScalers: ["std", "meanNorm"]
    labelScalers: ["std"]
    #dataScalers: ["meanNorm", "minMaxNorm", "std"]
    #labelScalers: ["meanNorm", "minMaxNorm", "std"]
    #scalers: ["meanNorm", "std", "minMaxNorm"]
    dataScale_values: [1]   #
    labelScale_values: [1] 
    #scale: 100 # Classification

cwt:
    #F0 is the center frequency (higher values = better frequency resolution)
    #B is the bandwidth parameter (higher values = better time resolution)
    # cmor give diagnal lines, no good
    # PUt this in exp track, and save the plots
    doCWT: True
    wavelet: ["fstep"] #"None" for no CWT
    #wavelet: ["cmor", "mexh"]
    waveLet_center_freq:  [10]
    waveLet_bandwidth: [0.8] 
    #waveLet_bandwidth: [1, 2] 
    rgbPlotChList: 0 #[7, 6, 5] # For 3 channel plot, 0 to use the chList
    # Norms to each ch/data if normTo_max is 0
    #normTo_max: 0.016 #Max for linear scale, but only a few outliers are this high
    #normTo_max: 0.008 #0 for none
    #normTo_min: 0
    normTo_max: 0 #10 #11.15 #Max for log scale
    normTo_min: 0 #1.81
    #normTo_max: 8.708692765932984 #Max for log scale
    #normTo_max: 8.92159461776423 #Max for log scale
    logScale: False

trainer:
    #criterion_regresh: "Huber" # for regresion
    #criterion_regresh: "MAE" # for regresion
    loss_regresh: ["MSE"] # for regresion
    #loss_regresh: ["MSE", "MAE", "Huber"] # for regresion

    loss_class: "CrossEntropyLoss" #For classification

    optimizer: ["Adam"]
    #optimizer: ["Adam", "SGD"]
    learning_rate: [0.00001] # note: test with smaller values
    weight_decay:  [0.00001]
    epochs: [3]
    seed: 4601

model: 
    regression: True
    name: "leNetV5"
    #name: "multilayerPerceptron"

    multilayerPerceptron:
        hidden_neurons: 100

    leNetV5:
        hidden_neurons: 100