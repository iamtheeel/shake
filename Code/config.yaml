outputDir: "output"

debugs:
    debug: True 
    writeValData: True
    saveModelInfo: True
    runModel: True

plts:
    pltDir: "../plots"
    savetCombined: True
    savetOverlay: False
    savetInline: False
    #yLim: [1, 3]
    yLim: [0, 0.002]
    #yLim: [-0.001, 0.001]

data:
    valSplitPercen: .2 #20% of the data for validation
    dataPath: "../TestData"
    test: "Test_2" #One person fixed pace, straight path, has labels
    #test: "Test_3" #One person, down hall, into and around lab, has labels, 
    #test: "Test_4" #Multiple people variyed pace, no labels

    #classes: [0, 1, 2, 3]
    classes: ['No Step', '001', '002', '003']
    sensorList: [8, 7, 6, 5, 4, 3, 2, 12, 1] # Test 2
    #sensorList: [6, 5, 4, 3, 2, 1, 10, 9, 11, 12, 13] # test 3
    sensorChList: [1, 2, 3, 4, 5, 6, 7, 10, 11, 14, 15, 16, 17, 18, 19, 20 ] # Just the Z chans
    #sensorChList: [[1], [2], [3], [4], [5], [6], [7], [8, 9, 10], [11, 12, 13], [14], [15], [16], [17], [18], [19], [20] ]

    stompSens: [5, 6, 7]
    stompThresh: 1.5
    dataThresh: 1.5


    windowLen: 2 #sec
    stepSize: 1 #sec

    batchSize: 256 #Should be power of 2

    scalers: ["minMaxNorm" ]
    #scalers: ["std" ]
    #scalers: ["meanNorm", "std", "minMaxNorm"]
    scale: 1
    #scale: 100 # Classification

trainer:
    #criterion_regresh: "Huber" # for regresion
    criterion_regresh: "MAE" # for regresion
    #criterion_regresh: "MSE" # for regresion
    criterion_class: "CrossEntropyLoss" #For classification

    optimizer: "Adam"
    #optimizer: "SGD"
    learning_rate: 0.0001
    weight_decay: 0.00001
    epochs: 50
    #epochs: 40 # best for class
    seed: 4601

model: 
    regression: True
    name: "leNetV5"
    #name: "multilayerPerceptron"

    multilayerPerceptron:
        hidden_neurons: 100
        seed: 4601

    leNetV5:
        hidden_neurons: 100
        seed: 4601